{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to user are present here.\n * */\n\n/**\n * This handler handles gets all users in the db.\n * send GET Request at /api/users\n * */\n\nexport const getAllUsersHandler = function () {\n  return new Response(200, {}, {\n    users: this.db.users\n  });\n};\n\n/**\n * This handler handles get a user from userId in the db.\n * send GET Request at /api/users/:userId\n * */\n\nexport const getUserHandler = function (schema, request) {\n  const userId = request.params.userId;\n  try {\n    const user = schema.users.findBy({\n      username: userId\n    }).attrs;\n    return new Response(200, {}, {\n      user\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles updating user details.\n * send POST Request at /api/users/edit\n * body contains { userData }\n * */\n\nexport const editUserHandler = function (schema, request) {\n  let user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const {\n      userData\n    } = JSON.parse(request.requestBody);\n    if (userData && userData.username && userData.username !== user.username) {\n      return new Response(404, {}, {\n        errors: [\"Username cannot be changed\"]\n      });\n    }\n    user = {\n      ...user,\n      ...userData,\n      updatedAt: formatDate()\n    };\n    this.db.users.update({\n      _id: user._id\n    }, user);\n    return new Response(201, {}, {\n      user\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler gets all the user bookmarks from the db.\n * send GET Request at /api/users/bookmark/\n * */\n\nexport const getBookmarkPostsHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    return new Response(200, {}, {\n      bookmarks: user.bookmarks\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n/**\n * This handler handles adding a post to user's bookmarks in the db.\n * send POST Request at /api/users/bookmark/:postId/\n * */\n\nexport const bookmarkPostHandler = function (schema, request) {\n  const {\n    postId\n  } = request.params;\n  const post = schema.posts.findBy({\n    _id: postId\n  }).attrs;\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const isBookmarked = user.bookmarks.some(currPostId => currPostId === postId);\n    if (isBookmarked) {\n      return new Response(400, {}, {\n        errors: [\"This Post is already bookmarked\"]\n      });\n    }\n    user.bookmarks.push(post._id);\n    this.db.users.update({\n      _id: user._id\n    }, {\n      ...user,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      bookmarks: user.bookmarks\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles adding a post to user's bookmarks in the db.\n * send POST Request at /api/users/remove-bookmark/:postId/\n * */\n\nexport const removePostFromBookmarkHandler = function (schema, request) {\n  const {\n    postId\n  } = request.params;\n  let user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const isBookmarked = user.bookmarks.some(currPostId => currPostId === postId);\n    if (!isBookmarked) {\n      return new Response(400, {}, {\n        errors: [\"Post not bookmarked yet\"]\n      });\n    }\n    const filteredBookmarks = user.bookmarks.filter(currPostId => currPostId !== postId);\n    user = {\n      ...user,\n      bookmarks: filteredBookmarks\n    };\n    this.db.users.update({\n      _id: user._id\n    }, {\n      ...user,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      bookmarks: user.bookmarks\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles follow action.\n * send POST Request at /api/users/follow/:followUserId/\n * */\n\nexport const followUserHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  const {\n    followUserId\n  } = request.params;\n  const followUser = schema.users.findBy({\n    _id: followUserId\n  }).attrs;\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    if (user._id === followUser._id) {\n      return new Response(404, {}, {\n        errors: [\"You cannot follow yourself\"]\n      });\n    }\n    const isFollowing = user.following.some(currUser => currUser._id === followUser._id);\n    if (isFollowing) {\n      return new Response(400, {}, {\n        errors: [\"User Already following\"]\n      });\n    }\n    const updatedUser = {\n      ...user,\n      following: [...user.following, {\n        ...followUser\n      }]\n    };\n    const updatedFollowUser = {\n      ...followUser,\n      followers: [...followUser.followers, {\n        ...user\n      }]\n    };\n    this.db.users.update({\n      _id: user._id\n    }, {\n      ...updatedUser,\n      updatedAt: formatDate()\n    });\n    this.db.users.update({\n      _id: followUser._id\n    }, {\n      ...updatedFollowUser,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      user: updatedUser,\n      followUser: updatedFollowUser\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles unfollow action.\n * send POST Request at /api/users/unfollow/:followUserId/\n * */\n\nexport const unfollowUserHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  const {\n    followUserId\n  } = request.params;\n  const followUser = this.db.users.findBy({\n    _id: followUserId\n  });\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const isFollowing = user.following.some(currUser => currUser._id === followUser._id);\n    if (!isFollowing) {\n      return new Response(400, {}, {\n        errors: [\"User already not following\"]\n      });\n    }\n    const updatedUser = {\n      ...user,\n      following: user.following.filter(currUser => currUser._id !== followUser._id)\n    };\n    const updatedFollowUser = {\n      ...followUser,\n      followers: followUser.followers.filter(currUser => currUser._id !== user._id)\n    };\n    this.db.users.update({\n      _id: user._id\n    }, {\n      ...updatedUser,\n      updatedAt: formatDate()\n    });\n    this.db.users.update({\n      _id: followUser._id\n    }, {\n      ...updatedFollowUser,\n      updatedAt: formatDate()\n    });\n    return new Response(200, {}, {\n      user: updatedUser,\n      followUser: updatedFollowUser\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["Response","formatDate","requiresAuth","getAllUsersHandler","users","db","getUserHandler","schema","request","userId","params","user","findBy","username","attrs","error","editUserHandler","call","errors","userData","JSON","parse","requestBody","updatedAt","update","_id","getBookmarkPostsHandler","bookmarks","bookmarkPostHandler","postId","post","posts","isBookmarked","some","currPostId","push","removePostFromBookmarkHandler","filteredBookmarks","filter","followUserHandler","followUserId","followUser","isFollowing","following","currUser","updatedUser","updatedFollowUser","followers","unfollowUserHandler"],"sources":["C:/Users/Tilwani's/Desktop/buzzbird-main/src/backend/controllers/UserController.js"],"sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\n\n/**\n * All the routes related to user are present here.\n * */\n\n/**\n * This handler handles gets all users in the db.\n * send GET Request at /api/users\n * */\n\nexport const getAllUsersHandler = function () {\n  return new Response(200, {}, { users: this.db.users });\n};\n\n/**\n * This handler handles get a user from userId in the db.\n * send GET Request at /api/users/:userId\n * */\n\nexport const getUserHandler = function (schema, request) {\n  const userId = request.params.userId;\n  try {\n    const user = schema.users.findBy({ username: userId }).attrs;\n    return new Response(200, {}, { user });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles updating user details.\n * send POST Request at /api/users/edit\n * body contains { userData }\n * */\n\nexport const editUserHandler = function (schema, request) {\n  let user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const { userData } = JSON.parse(request.requestBody);\n    if (userData && userData.username && userData.username !== user.username) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"Username cannot be changed\"],\n        }\n      );\n    }\n\n    user = { ...user, ...userData, updatedAt: formatDate() };\n    this.db.users.update({ _id: user._id }, user);\n    return new Response(201, {}, { user });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler gets all the user bookmarks from the db.\n * send GET Request at /api/users/bookmark/\n * */\n\nexport const getBookmarkPostsHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    return new Response(200, {}, { bookmarks: user.bookmarks });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n/**\n * This handler handles adding a post to user's bookmarks in the db.\n * send POST Request at /api/users/bookmark/:postId/\n * */\n\nexport const bookmarkPostHandler = function (schema, request) {\n  const { postId } = request.params;\n  const post = schema.posts.findBy({ _id: postId }).attrs;\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const isBookmarked = user.bookmarks.some(\n      (currPostId) => currPostId === postId\n    );\n    if (isBookmarked) {\n      return new Response(\n        400,\n        {},\n        { errors: [\"This Post is already bookmarked\"] }\n      );\n    }\n    user.bookmarks.push(post._id);\n    this.db.users.update(\n      { _id: user._id },\n      { ...user, updatedAt: formatDate() }\n    );\n    return new Response(200, {}, { bookmarks: user.bookmarks });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding a post to user's bookmarks in the db.\n * send POST Request at /api/users/remove-bookmark/:postId/\n * */\n\nexport const removePostFromBookmarkHandler = function (schema, request) {\n  const { postId } = request.params;\n  let user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const isBookmarked = user.bookmarks.some(\n      (currPostId) => currPostId === postId\n    );\n    if (!isBookmarked) {\n      return new Response(400, {}, { errors: [\"Post not bookmarked yet\"] });\n    }\n    const filteredBookmarks = user.bookmarks.filter(\n      (currPostId) => currPostId !== postId\n    );\n    user = { ...user, bookmarks: filteredBookmarks };\n    this.db.users.update(\n      { _id: user._id },\n      { ...user, updatedAt: formatDate() }\n    );\n    return new Response(200, {}, { bookmarks: user.bookmarks });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles follow action.\n * send POST Request at /api/users/follow/:followUserId/\n * */\n\nexport const followUserHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  const { followUserId } = request.params;\n  const followUser = schema.users.findBy({ _id: followUserId }).attrs;\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n\n    if (user._id === followUser._id) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\"You cannot follow yourself\"],\n        }\n      );\n    }\n\n    const isFollowing = user.following.some(\n      (currUser) => currUser._id === followUser._id\n    );\n\n    if (isFollowing) {\n      return new Response(400, {}, { errors: [\"User Already following\"] });\n    }\n\n    const updatedUser = {\n      ...user,\n      following: [...user.following, { ...followUser }],\n    };\n    const updatedFollowUser = {\n      ...followUser,\n      followers: [...followUser.followers, { ...user }],\n    };\n    this.db.users.update(\n      { _id: user._id },\n      { ...updatedUser, updatedAt: formatDate() }\n    );\n    this.db.users.update(\n      { _id: followUser._id },\n      { ...updatedFollowUser, updatedAt: formatDate() }\n    );\n    return new Response(\n      200,\n      {},\n      { user: updatedUser, followUser: updatedFollowUser }\n    );\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles unfollow action.\n * send POST Request at /api/users/unfollow/:followUserId/\n * */\n\nexport const unfollowUserHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  const { followUserId } = request.params;\n  const followUser = this.db.users.findBy({ _id: followUserId });\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const isFollowing = user.following.some(\n      (currUser) => currUser._id === followUser._id\n    );\n\n    if (!isFollowing) {\n      return new Response(400, {}, { errors: [\"User already not following\"] });\n    }\n\n    const updatedUser = {\n      ...user,\n      following: user.following.filter(\n        (currUser) => currUser._id !== followUser._id\n      ),\n    };\n    const updatedFollowUser = {\n      ...followUser,\n      followers: followUser.followers.filter(\n        (currUser) => currUser._id !== user._id\n      ),\n    };\n    this.db.users.update(\n      { _id: user._id },\n      { ...updatedUser, updatedAt: formatDate() }\n    );\n    this.db.users.update(\n      { _id: followUser._id },\n      { ...updatedFollowUser, updatedAt: formatDate() }\n    );\n    return new Response(\n      200,\n      {},\n      { user: updatedUser, followUser: updatedFollowUser }\n    );\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}