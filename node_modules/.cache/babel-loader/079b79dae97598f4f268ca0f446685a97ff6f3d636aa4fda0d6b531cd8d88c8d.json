{"ast":null,"code":"import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\nimport { v4 as uuid } from \"uuid\";\n\n/**\n * All the routes related to post comments are present here.\n * */\n\n/**\n * This handler handles getting all comments for a particular post in the db.\n * send GET Request at /api/comments/:postId\n * */\n\nexport const getPostCommentsHandler = function (schema, request) {\n  const postId = request.params.postId;\n  try {\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    return new Response(200, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles adding a comment to a particular post in the db.\n * send POST Request at /api/comments/add/:postId\n * */\n\nexport const addPostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const {\n      postId\n    } = request.params;\n    const {\n      commentData\n    } = JSON.parse(request.requestBody);\n    const comment = {\n      _id: uuid(),\n      ...commentData,\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profileAvatar: user.profileAvatar,\n      votes: {\n        upvotedBy: [],\n        downvotedBy: []\n      },\n      createdAt: formatDate(),\n      updatedAt: formatDate()\n    };\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    post.comments.push(comment);\n    this.db.posts.update({\n      _id: postId\n    }, post);\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles editing a comment to a particular post in the db.\n * send POST Request at /api/comments/edit/:postId/:commentId\n * */\n\nexport const editPostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const {\n      commentData\n    } = JSON.parse(request.requestBody);\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n    if (post.comments[commentIndex].username !== user.username) {\n      return new Response(400, {}, {\n        errors: [\"Cannot edit a comment doesn't belong to the User.\"]\n      });\n    }\n    post.comments[commentIndex] = {\n      ...post.comments[commentIndex],\n      ...commentData,\n      updatedAt: formatDate()\n    };\n    this.db.posts.update({\n      _id: postId\n    }, post);\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles deleting a comment to a particular post in the db.\n * send DELETE Request at /api/comments/delete/:postId/:commentId\n * */\n\nexport const deletePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n    if (post.comments[commentIndex].username !== user.username && post.username !== user.username) {\n      return new Response(400, {}, {\n        errors: [\"Cannot delete a comment doesn't belong to the User.\"]\n      });\n    }\n    post.comments = post.comments.filter(comment => comment._id !== commentId);\n    this.db.posts.update({\n      _id: postId\n    }, post);\n    return new Response(201, {}, {\n      posts: this.db.posts\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles upvoting a comment of a post in the db.\n * send POST Request at /api/comments/upvote/:postId/:commentId\n * */\n\nexport const upvotePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n    if (post.comments[commentIndex].votes.upvotedBy.some(currUser => currUser._id === user._id)) {\n      return new Response(400, {}, {\n        errors: [\"Cannot upvote a post that is already upvoted. \"]\n      });\n    }\n    post.comments[commentIndex].votes.downvotedBy = post.comments[commentIndex].votes.downvotedBy.filter(currUser => currUser._id !== user._id);\n    post.comments[commentIndex].votes.upvotedBy.push(user);\n    this.db.posts.update({\n      _id: postId\n    }, {\n      ...post,\n      updatedAt: formatDate()\n    });\n    return new Response(201, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles downvoting a comment of a post in the db.\n * send POST Request at /api/comments/downvote/:postId/:commentId\n * */\n\nexport const downvotePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    const {\n      postId,\n      commentId\n    } = request.params;\n    const post = schema.posts.findBy({\n      _id: postId\n    }).attrs;\n    const commentIndex = post.comments.findIndex(comment => comment._id === commentId);\n    if (post.comments[commentIndex].votes.downvotedBy.some(currUser => currUser._id === user._id)) {\n      return new Response(400, {}, {\n        errors: [\"Cannot downvote a post that is already downvoted. \"]\n      });\n    }\n    post.comments[commentIndex].votes.upvotedBy = post.comments[commentIndex].votes.upvotedBy.filter(currUser => currUser._id !== user._id);\n    post.comments[commentIndex].votes.downvotedBy.push(user);\n    this.db.posts.update({\n      _id: postId\n    }, {\n      ...post,\n      updatedAt: formatDate()\n    });\n    return new Response(201, {}, {\n      comments: post.comments\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["Response","formatDate","requiresAuth","v4","uuid","getPostCommentsHandler","schema","request","postId","params","post","posts","findBy","_id","attrs","comments","error","addPostCommentHandler","user","call","errors","commentData","JSON","parse","requestBody","comment","username","firstName","lastName","profileAvatar","votes","upvotedBy","downvotedBy","createdAt","updatedAt","push","db","update","editPostCommentHandler","commentId","commentIndex","findIndex","deletePostCommentHandler","filter","upvotePostCommentHandler","some","currUser","downvotePostCommentHandler"],"sources":["C:/Users/Tilwani's/Desktop/The-Dilemma/src/backend/controllers/CommentsController.js"],"sourcesContent":["import { Response } from \"miragejs\";\nimport { formatDate, requiresAuth } from \"../utils/authUtils\";\nimport { v4 as uuid } from \"uuid\";\n\n/**\n * All the routes related to post comments are present here.\n * */\n\n/**\n * This handler handles getting all comments for a particular post in the db.\n * send GET Request at /api/comments/:postId\n * */\n\nexport const getPostCommentsHandler = function (schema, request) {\n  const postId = request.params.postId;\n  try {\n    const post = schema.posts.findBy({ _id: postId }).attrs;\n    return new Response(200, {}, { comments: post.comments });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles adding a comment to a particular post in the db.\n * send POST Request at /api/comments/add/:postId\n * */\n\nexport const addPostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const { postId } = request.params;\n    const { commentData } = JSON.parse(request.requestBody);\n\n    const comment = {\n      _id: uuid(),\n      ...commentData,\n      username: user.username,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profileAvatar: user.profileAvatar,\n      votes: { upvotedBy: [], downvotedBy: [] },\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n    };\n    const post = schema.posts.findBy({ _id: postId }).attrs;\n    post.comments.push(comment);\n\n    this.db.posts.update({ _id: postId }, post);\n    return new Response(201, {}, { posts: this.db.posts });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles editing a comment to a particular post in the db.\n * send POST Request at /api/comments/edit/:postId/:commentId\n * */\n\nexport const editPostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const { postId, commentId } = request.params;\n    const { commentData } = JSON.parse(request.requestBody);\n    const post = schema.posts.findBy({ _id: postId }).attrs;\n    const commentIndex = post.comments.findIndex(\n      (comment) => comment._id === commentId\n    );\n    if (post.comments[commentIndex].username !== user.username) {\n      return new Response(\n        400,\n        {},\n        { errors: [\"Cannot edit a comment doesn't belong to the User.\"] }\n      );\n    }\n    post.comments[commentIndex] = {\n      ...post.comments[commentIndex],\n      ...commentData,\n      updatedAt: formatDate(),\n    };\n    this.db.posts.update({ _id: postId }, post);\n    return new Response(201, {}, { posts: this.db.posts });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles deleting a comment to a particular post in the db.\n * send DELETE Request at /api/comments/delete/:postId/:commentId\n * */\n\nexport const deletePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const { postId, commentId } = request.params;\n    const post = schema.posts.findBy({ _id: postId }).attrs;\n    const commentIndex = post.comments.findIndex(\n      (comment) => comment._id === commentId\n    );\n    if (\n      post.comments[commentIndex].username !== user.username &&\n      post.username !== user.username\n    ) {\n      return new Response(\n        400,\n        {},\n        { errors: [\"Cannot delete a comment doesn't belong to the User.\"] }\n      );\n    }\n    post.comments = post.comments.filter(\n      (comment) => comment._id !== commentId\n    );\n    this.db.posts.update({ _id: postId }, post);\n    return new Response(201, {}, { posts: this.db.posts });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles upvoting a comment of a post in the db.\n * send POST Request at /api/comments/upvote/:postId/:commentId\n * */\n\nexport const upvotePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const { postId, commentId } = request.params;\n    const post = schema.posts.findBy({ _id: postId }).attrs;\n    const commentIndex = post.comments.findIndex(\n      (comment) => comment._id === commentId\n    );\n\n    if (\n      post.comments[commentIndex].votes.upvotedBy.some(\n        (currUser) => currUser._id === user._id\n      )\n    ) {\n      return new Response(\n        400,\n        {},\n        { errors: [\"Cannot upvote a post that is already upvoted. \"] }\n      );\n    }\n    post.comments[commentIndex].votes.downvotedBy = post.comments[\n      commentIndex\n    ].votes.downvotedBy.filter((currUser) => currUser._id !== user._id);\n    post.comments[commentIndex].votes.upvotedBy.push(user);\n    this.db.posts.update({ _id: postId }, { ...post, updatedAt: formatDate() });\n    return new Response(201, {}, { comments: post.comments });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles downvoting a comment of a post in the db.\n * send POST Request at /api/comments/downvote/:postId/:commentId\n * */\n\nexport const downvotePostCommentHandler = function (schema, request) {\n  const user = requiresAuth.call(this, request);\n  try {\n    if (!user) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    const { postId, commentId } = request.params;\n    const post = schema.posts.findBy({ _id: postId }).attrs;\n    const commentIndex = post.comments.findIndex(\n      (comment) => comment._id === commentId\n    );\n\n    if (\n      post.comments[commentIndex].votes.downvotedBy.some(\n        (currUser) => currUser._id === user._id\n      )\n    ) {\n      return new Response(\n        400,\n        {},\n        { errors: [\"Cannot downvote a post that is already downvoted. \"] }\n      );\n    }\n    post.comments[commentIndex].votes.upvotedBy = post.comments[\n      commentIndex\n    ].votes.upvotedBy.filter((currUser) => currUser._id !== user._id);\n    post.comments[commentIndex].votes.downvotedBy.push(user);\n    this.db.posts.update({ _id: postId }, { ...post, updatedAt: formatDate() });\n    return new Response(201, {}, { comments: post.comments });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}