{"ast":null,"code":"import _objectSpread from\"C:/Users/Tilwani's/Desktop/The-Dilemma/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"C:/Users/Tilwani's/Desktop/The-Dilemma/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"username\",\"password\"];import{v4 as uuid}from\"uuid\";import{Response}from\"miragejs\";import{formatDate}from\"../utils/authUtils\";var sign=require(\"jwt-encode\");/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */ /**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, username, password}\n * */export var signupHandler=function signupHandler(schema,request){var _JSON$parse=JSON.parse(request.requestBody),username=_JSON$parse.username,password=_JSON$parse.password,rest=_objectWithoutProperties(_JSON$parse,_excluded);try{// check if username already exists\nvar foundUser=schema.users.findBy({username:username});if(foundUser){return new Response(422,{},{errors:[\"Unprocessable Entity. Username Already Exists.\"]});}var _id=uuid();var newUser=_objectSpread(_objectSpread({_id:_id,createdAt:formatDate(),updatedAt:formatDate(),username:username,password:password},rest),{},{followers:[],following:[],bookmarks:[]});var createdUser=schema.users.create(newUser);var encodedToken=sign({_id:_id,username:username},process.env.REACT_APP_JWT_SECRET);return new Response(201,{},{createdUser:createdUser,encodedToken:encodedToken});}catch(error){return new Response(500,{},{error:error});}};/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {username, password}\n * */export var loginHandler=function loginHandler(schema,request){var _JSON$parse2=JSON.parse(request.requestBody),username=_JSON$parse2.username,password=_JSON$parse2.password;try{var foundUser=schema.users.findBy({username:username});if(!foundUser){return new Response(404,{},{errors:[\"The username you entered is not Registered. Not Found error\"]});}if(password===foundUser.password){var encodedToken=sign({_id:foundUser._id,username:username},process.env.REACT_APP_JWT_SECRET);return new Response(200,{},{foundUser:foundUser,encodedToken:encodedToken});}return new Response(401,{},{errors:[\"The credentials you entered are invalid. Unauthorized access error.\"]});}catch(error){return new Response(500,{},{error:error});}};","map":{"version":3,"names":["v4","uuid","Response","formatDate","sign","require","signupHandler","schema","request","_JSON$parse","JSON","parse","requestBody","username","password","rest","_objectWithoutProperties","_excluded","foundUser","users","findBy","errors","_id","newUser","_objectSpread","createdAt","updatedAt","followers","following","bookmarks","createdUser","create","encodedToken","process","env","REACT_APP_JWT_SECRET","error","loginHandler","_JSON$parse2"],"sources":["C:/Users/Tilwani's/Desktop/The-Dilemma/src/backend/controllers/AuthController.js"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nconst sign = require(\"jwt-encode\");\n\n/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, username, password}\n * */\n\nexport const signupHandler = function (schema, request) {\n  const { username, password, ...rest } = JSON.parse(request.requestBody);\n  try {\n    // check if username already exists\n    const foundUser = schema.users.findBy({ username: username });\n    if (foundUser) {\n      return new Response(\n        422,\n        {},\n        {\n          errors: [\"Unprocessable Entity. Username Already Exists.\"],\n        }\n      );\n    }\n    const _id = uuid();\n\n    const newUser = {\n      _id,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      username,\n      password,\n      ...rest,\n      followers: [],\n      following: [],\n      bookmarks: [],\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign(\n      { _id, username },\n      process.env.REACT_APP_JWT_SECRET\n    );\n    return new Response(201, {}, { createdUser, encodedToken });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {username, password}\n * */\n\nexport const loginHandler = function (schema, request) {\n  const { username, password } = JSON.parse(request.requestBody);\n  try {\n    const foundUser = schema.users.findBy({ username: username });\n    if (!foundUser) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    if (password === foundUser.password) {\n      const encodedToken = sign(\n        { _id: foundUser._id, username },\n        process.env.REACT_APP_JWT_SECRET\n      );\n      return new Response(200, {}, { foundUser, encodedToken });\n    }\n    return new Response(\n      401,\n      {},\n      {\n        errors: [\n          \"The credentials you entered are invalid. Unauthorized access error.\",\n        ],\n      }\n    );\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}