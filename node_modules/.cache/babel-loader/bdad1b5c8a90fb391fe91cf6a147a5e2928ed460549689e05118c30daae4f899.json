{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nconst sign = require(\"jwt-encode\");\n\n/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, username, password}\n * */\n\nexport const signupHandler = function (schema, request) {\n  const {\n    username,\n    password,\n    ...rest\n  } = JSON.parse(request.requestBody);\n  try {\n    // check if username already exists\n    const foundUser = schema.users.findBy({\n      username: username\n    });\n    if (foundUser) {\n      return new Response(422, {}, {\n        errors: [\"Unprocessable Entity. Username Already Exists.\"]\n      });\n    }\n    const _id = uuid();\n    const newUser = {\n      _id,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      username,\n      password,\n      ...rest,\n      followers: [],\n      following: [],\n      bookmarks: []\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign({\n      _id,\n      username\n    }, process.env.REACT_APP_JWT_SECRET);\n    return new Response(201, {}, {\n      createdUser,\n      encodedToken\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};\n\n/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {username, password}\n * */\n\nexport const loginHandler = function (schema, request) {\n  const {\n    username,\n    password\n  } = JSON.parse(request.requestBody);\n  try {\n    const foundUser = schema.users.findBy({\n      username: username\n    });\n    if (!foundUser) {\n      return new Response(404, {}, {\n        errors: [\"The username you entered is not Registered. Not Found error\"]\n      });\n    }\n    if (password === foundUser.password) {\n      const encodedToken = sign({\n        _id: foundUser._id,\n        username\n      }, process.env.REACT_APP_JWT_SECRET);\n      return new Response(200, {}, {\n        foundUser,\n        encodedToken\n      });\n    }\n    return new Response(401, {}, {\n      errors: [\"The credentials you entered are invalid. Unauthorized access error.\"]\n    });\n  } catch (error) {\n    return new Response(500, {}, {\n      error\n    });\n  }\n};","map":{"version":3,"names":["v4","uuid","Response","formatDate","sign","require","signupHandler","schema","request","username","password","rest","JSON","parse","requestBody","foundUser","users","findBy","errors","_id","newUser","createdAt","updatedAt","followers","following","bookmarks","createdUser","create","encodedToken","process","env","REACT_APP_JWT_SECRET","error","loginHandler"],"sources":["C:/Users/Tilwani's/Desktop/The-Dilemma/src/backend/controllers/AuthController.js"],"sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport { Response } from \"miragejs\";\nimport { formatDate } from \"../utils/authUtils\";\nconst sign = require(\"jwt-encode\");\n\n/**\n * All the routes related to Auth are present here.\n * These are Publicly accessible routes.\n * */\n\n/**\n * This handler handles user signups.\n * send POST Request at /api/auth/signup\n * body contains {firstName, lastName, username, password}\n * */\n\nexport const signupHandler = function (schema, request) {\n  const { username, password, ...rest } = JSON.parse(request.requestBody);\n  try {\n    // check if username already exists\n    const foundUser = schema.users.findBy({ username: username });\n    if (foundUser) {\n      return new Response(\n        422,\n        {},\n        {\n          errors: [\"Unprocessable Entity. Username Already Exists.\"],\n        }\n      );\n    }\n    const _id = uuid();\n\n    const newUser = {\n      _id,\n      createdAt: formatDate(),\n      updatedAt: formatDate(),\n      username,\n      password,\n      ...rest,\n      followers: [],\n      following: [],\n      bookmarks: [],\n    };\n    const createdUser = schema.users.create(newUser);\n    const encodedToken = sign(\n      { _id, username },\n      process.env.REACT_APP_JWT_SECRET\n    );\n    return new Response(201, {}, { createdUser, encodedToken });\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n\n/**\n * This handler handles user login.\n * send POST Request at /api/auth/login\n * body contains {username, password}\n * */\n\nexport const loginHandler = function (schema, request) {\n  const { username, password } = JSON.parse(request.requestBody);\n  try {\n    const foundUser = schema.users.findBy({ username: username });\n    if (!foundUser) {\n      return new Response(\n        404,\n        {},\n        {\n          errors: [\n            \"The username you entered is not Registered. Not Found error\",\n          ],\n        }\n      );\n    }\n    if (password === foundUser.password) {\n      const encodedToken = sign(\n        { _id: foundUser._id, username },\n        process.env.REACT_APP_JWT_SECRET\n      );\n      return new Response(200, {}, { foundUser, encodedToken });\n    }\n    return new Response(\n      401,\n      {},\n      {\n        errors: [\n          \"The credentials you entered are invalid. Unauthorized access error.\",\n        ],\n      }\n    );\n  } catch (error) {\n    return new Response(\n      500,\n      {},\n      {\n        error,\n      }\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}