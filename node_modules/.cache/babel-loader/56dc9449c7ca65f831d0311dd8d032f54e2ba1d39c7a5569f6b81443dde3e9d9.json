{"ast":null,"code":"import _objectSpread from\"C:/Users/Tilwani's/Desktop/The-Dilemma/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{Server,Model,RestSerializer}from\"miragejs\";import{posts}from\"./backend/db/posts\";import{users}from\"./backend/db/users\";import{loginHandler,signupHandler}from\"./backend/controllers/AuthController\";import{createPostHandler,getAllpostsHandler,getPostHandler,deletePostHandler,editPostHandler,likePostHandler,dislikePostHandler,getAllUserPostsHandler}from\"./backend/controllers/PostController\";import{followUserHandler,getAllUsersHandler,getUserHandler,getBookmarkPostsHandler,bookmarkPostHandler,removePostFromBookmarkHandler,unfollowUserHandler,editUserHandler}from\"./backend/controllers/UserController\";import{getPostCommentsHandler,addPostCommentHandler,editPostCommentHandler,deletePostCommentHandler,upvotePostCommentHandler,downvotePostCommentHandler}from\"./backend/controllers/CommentsController\";export function makeServer(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},_ref$environment=_ref.environment,environment=_ref$environment===void 0?\"development\":_ref$environment;return new Server({serializers:{application:RestSerializer},environment:environment,// TODO: Use Relationships to have named relational Data\nmodels:{post:Model,user:Model},// Runs on the start of the server\nseeds:function seeds(server){server.logging=false;users.forEach(function(item){return server.create(\"user\",_objectSpread({followers:[],following:[],bookmarks:[]},item));});posts.forEach(function(item){return server.create(\"post\",_objectSpread({},item));});},routes:function routes(){this.namespace=\"api\";// auth routes (public)\nthis.post(\"/auth/signup\",signupHandler.bind(this));this.post(\"/auth/login\",loginHandler.bind(this));// post routes (public)\nthis.get(\"/posts\",getAllpostsHandler.bind(this));this.get(\"/posts/:postId\",getPostHandler.bind(this));this.get(\"/posts/user/:username\",getAllUserPostsHandler.bind(this));// post routes (private)\nthis.post(\"/posts\",createPostHandler.bind(this));this.delete(\"/posts/:postId\",deletePostHandler.bind(this));this.post(\"/posts/edit/:postId\",editPostHandler.bind(this));this.post(\"/posts/like/:postId\",likePostHandler.bind(this));this.post(\"/posts/dislike/:postId\",dislikePostHandler.bind(this));// user routes (public)\nthis.get(\"/users\",getAllUsersHandler.bind(this));this.get(\"/users/:userId\",getUserHandler.bind(this));// user routes (private)\nthis.post(\"users/edit\",editUserHandler.bind(this));this.get(\"/users/bookmark\",getBookmarkPostsHandler.bind(this));this.post(\"/users/bookmark/:postId\",bookmarkPostHandler.bind(this));this.post(\"/users/remove-bookmark/:postId\",removePostFromBookmarkHandler.bind(this));this.post(\"/users/follow/:followUserId\",followUserHandler.bind(this));this.post(\"/users/unfollow/:followUserId\",unfollowUserHandler.bind(this));//post comments routes (public)\nthis.get(\"/comments/:postId\",getPostCommentsHandler.bind(this));//post comments routes (private)\nthis.post(\"/comments/add/:postId\",addPostCommentHandler.bind(this));this.post(\"/comments/edit/:postId/:commentId\",editPostCommentHandler.bind(this));this.post(\"/comments/delete/:postId/:commentId\",deletePostCommentHandler.bind(this));this.post(\"/comments/upvote/:postId/:commentId\",upvotePostCommentHandler.bind(this));this.post(\"/comments/downvote/:postId/:commentId\",downvotePostCommentHandler.bind(this));this.passthrough(\"https://api.cloudinary.com/v1_1/dxnbnviuz/auto/upload\");}});}","map":{"version":3,"names":["Server","Model","RestSerializer","posts","users","loginHandler","signupHandler","createPostHandler","getAllpostsHandler","getPostHandler","deletePostHandler","editPostHandler","likePostHandler","dislikePostHandler","getAllUserPostsHandler","followUserHandler","getAllUsersHandler","getUserHandler","getBookmarkPostsHandler","bookmarkPostHandler","removePostFromBookmarkHandler","unfollowUserHandler","editUserHandler","getPostCommentsHandler","addPostCommentHandler","editPostCommentHandler","deletePostCommentHandler","upvotePostCommentHandler","downvotePostCommentHandler","makeServer","_ref","arguments","length","undefined","_ref$environment","environment","serializers","application","models","post","user","seeds","server","logging","forEach","item","create","_objectSpread","followers","following","bookmarks","routes","namespace","bind","get","delete","passthrough"],"sources":["C:/Users/Tilwani's/Desktop/The-Dilemma/src/server.js"],"sourcesContent":["import { Server, Model, RestSerializer } from \"miragejs\";\nimport { posts } from \"./backend/db/posts\";\nimport { users } from \"./backend/db/users\";\nimport {\n  loginHandler,\n  signupHandler,\n} from \"./backend/controllers/AuthController\";\nimport {\n  createPostHandler,\n  getAllpostsHandler,\n  getPostHandler,\n  deletePostHandler,\n  editPostHandler,\n  likePostHandler,\n  dislikePostHandler,\n  getAllUserPostsHandler,\n} from \"./backend/controllers/PostController\";\nimport {\n  followUserHandler,\n  getAllUsersHandler,\n  getUserHandler,\n  getBookmarkPostsHandler,\n  bookmarkPostHandler,\n  removePostFromBookmarkHandler,\n  unfollowUserHandler,\n  editUserHandler,\n} from \"./backend/controllers/UserController\";\nimport {\n  getPostCommentsHandler,\n  addPostCommentHandler,\n  editPostCommentHandler,\n  deletePostCommentHandler,\n  upvotePostCommentHandler,\n  downvotePostCommentHandler,\n} from \"./backend/controllers/CommentsController\";\n\nexport function makeServer({ environment = \"development\" } = {}) {\n  return new Server({\n    serializers: {\n      application: RestSerializer,\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      post: Model,\n      user: Model,\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      server.logging = false;\n      users.forEach((item) =>\n        server.create(\"user\", {\n          followers: [],\n          following: [],\n          bookmarks: [],\n          ...item,\n        })\n      );\n      posts.forEach((item) => server.create(\"post\", { ...item }));\n    },\n\n    routes() {\n      this.namespace = \"api\";\n      // auth routes (public)\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this));\n\n      // post routes (public)\n      this.get(\"/posts\", getAllpostsHandler.bind(this));\n      this.get(\"/posts/:postId\", getPostHandler.bind(this));\n      this.get(\"/posts/user/:username\", getAllUserPostsHandler.bind(this));\n\n      // post routes (private)\n      this.post(\"/posts\", createPostHandler.bind(this));\n      this.delete(\"/posts/:postId\", deletePostHandler.bind(this));\n      this.post(\"/posts/edit/:postId\", editPostHandler.bind(this));\n      this.post(\"/posts/like/:postId\", likePostHandler.bind(this));\n      this.post(\"/posts/dislike/:postId\", dislikePostHandler.bind(this));\n\n      // user routes (public)\n      this.get(\"/users\", getAllUsersHandler.bind(this));\n      this.get(\"/users/:userId\", getUserHandler.bind(this));\n\n      // user routes (private)\n      this.post(\"users/edit\", editUserHandler.bind(this));\n      this.get(\"/users/bookmark\", getBookmarkPostsHandler.bind(this));\n      this.post(\"/users/bookmark/:postId\", bookmarkPostHandler.bind(this));\n      this.post(\n        \"/users/remove-bookmark/:postId\",\n        removePostFromBookmarkHandler.bind(this)\n      );\n      this.post(\"/users/follow/:followUserId\", followUserHandler.bind(this));\n      this.post(\n        \"/users/unfollow/:followUserId\",\n        unfollowUserHandler.bind(this)\n      );\n\n      //post comments routes (public)\n      this.get(\"/comments/:postId\", getPostCommentsHandler.bind(this));\n\n      //post comments routes (private)\n      this.post(\"/comments/add/:postId\", addPostCommentHandler.bind(this));\n      this.post(\n        \"/comments/edit/:postId/:commentId\",\n        editPostCommentHandler.bind(this)\n      );\n      this.post(\n        \"/comments/delete/:postId/:commentId\",\n        deletePostCommentHandler.bind(this)\n      );\n      this.post(\n        \"/comments/upvote/:postId/:commentId\",\n        upvotePostCommentHandler.bind(this)\n      );\n      this.post(\n        \"/comments/downvote/:postId/:commentId\",\n        downvotePostCommentHandler.bind(this)\n      );\n\n      this.passthrough(\"https://api.cloudinary.com/v1_1/dxnbnviuz/auto/upload\");\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}