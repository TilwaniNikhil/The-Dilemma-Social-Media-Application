{"ast":null,"code":"var CryptoJS = require('ts.cryptojs256');\n\n/**\n * Default options for JWT signature\n */\nvar defaultHeader = {\n  alg: 'HS256',\n  typ: 'JWT'\n};\n\n/**\n * Return a base64 URL\n *\n * @param {string} data - some data to be base64 encoded\n * @return {string} A base64url encoded string\n */\nfunction base64url(data) {\n  return CryptoJS.enc.Base64.stringify(data).replace(/=+$/, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\n/**\n * Create a very basic JWT signature\n *\n * @param {Object} data - the data object you want to have signed\n * @param {string} secret - secret to use to sign token with\n * @param {Object} options - JWT header options\n * @return {string} JSON Web Token that has been signed\n */\nfunction sign(data, secret) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var header = Object.assign(defaultHeader, options);\n  if (header.alg !== 'HS256' && header.typ !== 'JWT') {\n    throw new Error('jwt-encode only support the HS256 algorithm and the JWT type of hash');\n  }\n  var encodedHeader = encode(header);\n  var encodedData = encode(data);\n  var signature = \"\".concat(encodedHeader, \".\").concat(encodedData);\n  signature = CryptoJS.HmacSHA256(signature, secret);\n  signature = base64url(signature);\n  return \"\".concat(encodedHeader, \".\").concat(encodedData, \".\").concat(signature);\n}\n\n/**\n *  Safely base64url encode a JS Object in a way that is UTF-8 safe\n *\n *  @param {Object} Javascript object payload to be encoded\n *  @return {string} utf-8 safe base64url encoded payload\n */\nfunction encode(data) {\n  var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));\n  return base64url(stringifiedData);\n}\nmodule.exports = sign;","map":{"version":3,"names":["CryptoJS","require","defaultHeader","alg","typ","base64url","data","enc","Base64","stringify","replace","sign","secret","options","arguments","length","undefined","header","Object","assign","Error","encodedHeader","encode","encodedData","signature","concat","HmacSHA256","stringifiedData","Utf8","parse","JSON","module","exports"],"sources":["C:/Users/Tilwani's/Desktop/The-Dilemma/node_modules/jwt-encode/src/index.js"],"sourcesContent":["const CryptoJS = require('ts.cryptojs256');\n\n/**\n * Default options for JWT signature\n */\nconst defaultHeader = { alg: 'HS256', typ: 'JWT' };\n\n/**\n * Return a base64 URL\n *\n * @param {string} data - some data to be base64 encoded\n * @return {string} A base64url encoded string\n */\nfunction base64url (data) {\n  return CryptoJS.enc.Base64\n    .stringify(data)\n    .replace(/=+$/, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_');\n}\n\n/**\n * Create a very basic JWT signature\n *\n * @param {Object} data - the data object you want to have signed\n * @param {string} secret - secret to use to sign token with\n * @param {Object} options - JWT header options\n * @return {string} JSON Web Token that has been signed\n */\nfunction sign (data, secret, options = {}) {\n  const header = Object.assign(defaultHeader, options);\n  if (header.alg !== 'HS256' && header.typ !== 'JWT') {\n    throw new Error('jwt-encode only support the HS256 algorithm and the JWT type of hash');\n  }\n\n  const encodedHeader = encode(header);\n  const encodedData = encode(data);\n\n  let signature = `${encodedHeader}.${encodedData}`;\n  signature = CryptoJS.HmacSHA256(signature, secret);\n  signature = base64url(signature);\n  return `${encodedHeader}.${encodedData}.${signature}`;\n}\n\n/**\n *  Safely base64url encode a JS Object in a way that is UTF-8 safe\n *\n *  @param {Object} Javascript object payload to be encoded\n *  @return {string} utf-8 safe base64url encoded payload\n */\nfunction encode (data) {\n  const stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));\n  return base64url(stringifiedData);\n}\n\nmodule.exports = sign;\n"],"mappings":"AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;;AAE1C;AACA;AACA;AACA,IAAMC,aAAa,GAAG;EAAEC,GAAG,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAM,CAAC;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAEC,IAAI,EAAE;EACxB,OAAON,QAAQ,CAACO,GAAG,CAACC,MAAM,CACvBC,SAAS,CAACH,IAAI,CAAC,CACfI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,IAAIA,CAAEL,IAAI,EAAEM,MAAM,EAAgB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACvC,IAAMG,MAAM,GAAGC,MAAM,CAACC,MAAM,CAACjB,aAAa,EAAEW,OAAO,CAAC;EACpD,IAAII,MAAM,CAACd,GAAG,KAAK,OAAO,IAAIc,MAAM,CAACb,GAAG,KAAK,KAAK,EAAE;IAClD,MAAM,IAAIgB,KAAK,CAAC,sEAAsE,CAAC;EACzF;EAEA,IAAMC,aAAa,GAAGC,MAAM,CAACL,MAAM,CAAC;EACpC,IAAMM,WAAW,GAAGD,MAAM,CAAChB,IAAI,CAAC;EAEhC,IAAIkB,SAAS,MAAAC,MAAA,CAAMJ,aAAa,OAAAI,MAAA,CAAIF,WAAW,CAAE;EACjDC,SAAS,GAAGxB,QAAQ,CAAC0B,UAAU,CAACF,SAAS,EAAEZ,MAAM,CAAC;EAClDY,SAAS,GAAGnB,SAAS,CAACmB,SAAS,CAAC;EAChC,UAAAC,MAAA,CAAUJ,aAAa,OAAAI,MAAA,CAAIF,WAAW,OAAAE,MAAA,CAAID,SAAS;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,MAAMA,CAAEhB,IAAI,EAAE;EACrB,IAAMqB,eAAe,GAAG3B,QAAQ,CAACO,GAAG,CAACqB,IAAI,CAACC,KAAK,CAACC,IAAI,CAACrB,SAAS,CAACH,IAAI,CAAC,CAAC;EACrE,OAAOD,SAAS,CAACsB,eAAe,CAAC;AACnC;AAEAI,MAAM,CAACC,OAAO,GAAGrB,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}