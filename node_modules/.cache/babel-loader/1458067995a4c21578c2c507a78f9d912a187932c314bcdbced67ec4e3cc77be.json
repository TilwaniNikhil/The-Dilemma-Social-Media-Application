{"ast":null,"code":"import { Server, Model, RestSerializer } from \"miragejs\";\nimport { posts } from \"./backend/db/posts\";\nimport { users } from \"./backend/db/users\";\nimport { loginHandler, signupHandler } from \"./backend/controllers/AuthController\";\nimport { createPostHandler, getAllpostsHandler, getPostHandler, deletePostHandler, editPostHandler, likePostHandler, dislikePostHandler, getAllUserPostsHandler } from \"./backend/controllers/PostController\";\nimport { followUserHandler, getAllUsersHandler, getUserHandler, getBookmarkPostsHandler, bookmarkPostHandler, removePostFromBookmarkHandler, unfollowUserHandler, editUserHandler } from \"./backend/controllers/UserController\";\nimport { getPostCommentsHandler, addPostCommentHandler, editPostCommentHandler, deletePostCommentHandler, upvotePostCommentHandler, downvotePostCommentHandler } from \"./backend/controllers/CommentsController\";\nexport function makeServer() {\n  let {\n    environment = \"development\"\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return new Server({\n    serializers: {\n      application: RestSerializer\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      post: Model,\n      user: Model\n    },\n    // Runs on the start of the server\n    seeds(server) {\n      server.logging = false;\n      users.forEach(item => server.create(\"user\", {\n        followers: [],\n        following: [],\n        bookmarks: [],\n        ...item\n      }));\n      posts.forEach(item => server.create(\"post\", {\n        ...item\n      }));\n    },\n    routes() {\n      this.namespace = \"api\";\n      // auth routes (public)\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this));\n\n      // post routes (public)\n      this.get(\"/posts\", getAllpostsHandler.bind(this));\n      this.get(\"/posts/:postId\", getPostHandler.bind(this));\n      this.get(\"/posts/user/:username\", getAllUserPostsHandler.bind(this));\n\n      // post routes (private)\n      this.post(\"/posts\", createPostHandler.bind(this));\n      this.delete(\"/posts/:postId\", deletePostHandler.bind(this));\n      this.post(\"/posts/edit/:postId\", editPostHandler.bind(this));\n      this.post(\"/posts/like/:postId\", likePostHandler.bind(this));\n      this.post(\"/posts/dislike/:postId\", dislikePostHandler.bind(this));\n\n      // user routes (public)\n      this.get(\"/users\", getAllUsersHandler.bind(this));\n      this.get(\"/users/:userId\", getUserHandler.bind(this));\n\n      // user routes (private)\n      this.post(\"users/edit\", editUserHandler.bind(this));\n      this.get(\"/users/bookmark\", getBookmarkPostsHandler.bind(this));\n      this.post(\"/users/bookmark/:postId\", bookmarkPostHandler.bind(this));\n      this.post(\"/users/remove-bookmark/:postId\", removePostFromBookmarkHandler.bind(this));\n      this.post(\"/users/follow/:followUserId\", followUserHandler.bind(this));\n      this.post(\"/users/unfollow/:followUserId\", unfollowUserHandler.bind(this));\n\n      //post comments routes (public)\n      this.get(\"/comments/:postId\", getPostCommentsHandler.bind(this));\n\n      //post comments routes (private)\n      this.post(\"/comments/add/:postId\", addPostCommentHandler.bind(this));\n      this.post(\"/comments/edit/:postId/:commentId\", editPostCommentHandler.bind(this));\n      this.post(\"/comments/delete/:postId/:commentId\", deletePostCommentHandler.bind(this));\n      this.post(\"/comments/upvote/:postId/:commentId\", upvotePostCommentHandler.bind(this));\n      this.post(\"/comments/downvote/:postId/:commentId\", downvotePostCommentHandler.bind(this));\n      this.passthrough(\"https://api.cloudinary.com/v1_1/dxnbnviuz/auto/upload\");\n    }\n  });\n}","map":{"version":3,"names":["Server","Model","RestSerializer","posts","users","loginHandler","signupHandler","createPostHandler","getAllpostsHandler","getPostHandler","deletePostHandler","editPostHandler","likePostHandler","dislikePostHandler","getAllUserPostsHandler","followUserHandler","getAllUsersHandler","getUserHandler","getBookmarkPostsHandler","bookmarkPostHandler","removePostFromBookmarkHandler","unfollowUserHandler","editUserHandler","getPostCommentsHandler","addPostCommentHandler","editPostCommentHandler","deletePostCommentHandler","upvotePostCommentHandler","downvotePostCommentHandler","makeServer","environment","arguments","length","undefined","serializers","application","models","post","user","seeds","server","logging","forEach","item","create","followers","following","bookmarks","routes","namespace","bind","get","delete","passthrough"],"sources":["C:/Users/Tilwani's/Desktop/The-Dilemma/src/server.js"],"sourcesContent":["import { Server, Model, RestSerializer } from \"miragejs\";\nimport { posts } from \"./backend/db/posts\";\nimport { users } from \"./backend/db/users\";\nimport {\n  loginHandler,\n  signupHandler,\n} from \"./backend/controllers/AuthController\";\nimport {\n  createPostHandler,\n  getAllpostsHandler,\n  getPostHandler,\n  deletePostHandler,\n  editPostHandler,\n  likePostHandler,\n  dislikePostHandler,\n  getAllUserPostsHandler,\n} from \"./backend/controllers/PostController\";\nimport {\n  followUserHandler,\n  getAllUsersHandler,\n  getUserHandler,\n  getBookmarkPostsHandler,\n  bookmarkPostHandler,\n  removePostFromBookmarkHandler,\n  unfollowUserHandler,\n  editUserHandler,\n} from \"./backend/controllers/UserController\";\nimport {\n  getPostCommentsHandler,\n  addPostCommentHandler,\n  editPostCommentHandler,\n  deletePostCommentHandler,\n  upvotePostCommentHandler,\n  downvotePostCommentHandler,\n} from \"./backend/controllers/CommentsController\";\n\nexport function makeServer({ environment = \"development\" } = {}) {\n  return new Server({\n    serializers: {\n      application: RestSerializer,\n    },\n    environment,\n    // TODO: Use Relationships to have named relational Data\n    models: {\n      post: Model,\n      user: Model,\n    },\n\n    // Runs on the start of the server\n    seeds(server) {\n      server.logging = false;\n      users.forEach((item) =>\n        server.create(\"user\", {\n          followers: [],\n          following: [],\n          bookmarks: [],\n          ...item,\n        })\n      );\n      posts.forEach((item) => server.create(\"post\", { ...item }));\n    },\n\n    routes() {\n      this.namespace = \"api\";\n      // auth routes (public)\n      this.post(\"/auth/signup\", signupHandler.bind(this));\n      this.post(\"/auth/login\", loginHandler.bind(this));\n\n      // post routes (public)\n      this.get(\"/posts\", getAllpostsHandler.bind(this));\n      this.get(\"/posts/:postId\", getPostHandler.bind(this));\n      this.get(\"/posts/user/:username\", getAllUserPostsHandler.bind(this));\n\n      // post routes (private)\n      this.post(\"/posts\", createPostHandler.bind(this));\n      this.delete(\"/posts/:postId\", deletePostHandler.bind(this));\n      this.post(\"/posts/edit/:postId\", editPostHandler.bind(this));\n      this.post(\"/posts/like/:postId\", likePostHandler.bind(this));\n      this.post(\"/posts/dislike/:postId\", dislikePostHandler.bind(this));\n\n      // user routes (public)\n      this.get(\"/users\", getAllUsersHandler.bind(this));\n      this.get(\"/users/:userId\", getUserHandler.bind(this));\n\n      // user routes (private)\n      this.post(\"users/edit\", editUserHandler.bind(this));\n      this.get(\"/users/bookmark\", getBookmarkPostsHandler.bind(this));\n      this.post(\"/users/bookmark/:postId\", bookmarkPostHandler.bind(this));\n      this.post(\n        \"/users/remove-bookmark/:postId\",\n        removePostFromBookmarkHandler.bind(this)\n      );\n      this.post(\"/users/follow/:followUserId\", followUserHandler.bind(this));\n      this.post(\n        \"/users/unfollow/:followUserId\",\n        unfollowUserHandler.bind(this)\n      );\n\n      //post comments routes (public)\n      this.get(\"/comments/:postId\", getPostCommentsHandler.bind(this));\n\n      //post comments routes (private)\n      this.post(\"/comments/add/:postId\", addPostCommentHandler.bind(this));\n      this.post(\n        \"/comments/edit/:postId/:commentId\",\n        editPostCommentHandler.bind(this)\n      );\n      this.post(\n        \"/comments/delete/:postId/:commentId\",\n        deletePostCommentHandler.bind(this)\n      );\n      this.post(\n        \"/comments/upvote/:postId/:commentId\",\n        upvotePostCommentHandler.bind(this)\n      );\n      this.post(\n        \"/comments/downvote/:postId/:commentId\",\n        downvotePostCommentHandler.bind(this)\n      );\n\n      this.passthrough(\"https://api.cloudinary.com/v1_1/dxnbnviuz/auto/upload\");\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}